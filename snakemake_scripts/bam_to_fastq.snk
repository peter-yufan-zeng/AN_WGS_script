###import libraries
import pandas as pd
import os

configfile: "graham_config.yml"
###
SCRATCH = "/scratch/zyfniu"
print("\n***INPUT FILE: " + config['input'] + "***\n")
INPUT = pd.read_csv(config['input'],names = ['Patient','Sex','n_vs_t','Sample','Lane','bam'],header = 0)
INPUT['Lane'] = INPUT.Lane.apply(str)
INPUT['Sample_Lane'] = INPUT.Sample + "_" + INPUT.Lane
SAMPLE =  INPUT['Sample'].unique()
TMP = "temp"
PAT = INPUT.Patient.drop_duplicates()
TUMOR = INPUT[(INPUT.n_vs_t == 1)].Sample.drop_duplicates()
SAMPLE_LANE = INPUT.Sample_Lane
print(INPUT)

OUTDIR = config['outdir']

###
###SGL_SAREK_CMD = "singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/raw,"+ OUTDIR + \
#" $SCRATCH/singularity_images/nfcore-sarek-2.6.img"
#SGL_SAREK_CMD = "module purge; module load samtools; "

rule all:
	input:
		expand(OUTDIR + "/fastq/{samples}_R1.fastq.gz", samples=SAMPLE),
		expand(OUTDIR + "/fastq/{samples}_R2.fastq.gz", samples=SAMPLE)

def get_bam(wildcards):
	return expand(INPUT[INPUT.Sample == wildcards.sample].bam)

rule bam_to_fastq_one_step:
	input:
		get_bam
	output:
		r1 = OUTDIR + "/fastq/{sample}_R1.fastq.gz",
		r2 = OUTDIR + "/fastq/{sample}_R2.fastq.gz"
	threads: 6
	resources:
		time = 36*60,
		mem_mb = 55000
	container:
		config["singularity"]["samtools"]
	shell:
		"""
		samtools collate --threads 5 -u -O {input} $AN_WGS_temp/{wildcards.sample} | \
		samtools fastq -1 {output.r1} -2 {output.r2} \
		-0 /dev/null -s /dev/null \
		-O -t --threads 5 -n
		"""
