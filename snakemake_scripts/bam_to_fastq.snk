###import libraries
import pandas as pd
import os

###
SCRATCH = "/gpfs/fs0/scratch/n/nicholsa/zyfniu"
print("\n***INPUT FILE: " + config['input'] + "***\n")
INPUT = pd.read_table(config['input'],names = ['Patient','Sex','n_vs_t','Sample','Lane','bam'])
INPUT['Lane'] = INPUT.Lane.apply(str)
INPUT['Sample_Lane'] = INPUT.Sample + "_" + INPUT.Lane
SAMPLE =  INPUT['Sample'].unique()
TMP = "temp"
PAT = INPUT.Patient.drop_duplicates()
TUMOR = INPUT[(INPUT.n_vs_t == 1)].Sample.drop_duplicates()
SAMPLE_LANE = INPUT.Sample_Lane
print(INPUT)

###
SGL_SAREK_CMD = "singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/raw,"+ OUTDIR + \
" $SCRATCH/singularity_images/nfcore-sarek-2.6.img"

rule all:
	input:
		### filtered bam
		expand(SCRATCH + "/AN_WGS/raw/{samples}_R1.fastq.gz", samples=SAMPLE),
        expand(SCRATCH + "/AN_WGS/raw/{samples}_R2.fastq.gz", samples=SAMPLE)

def get_bam(wildcards):
	return expand(INPUT[INPUT.Sample == wildcards.sample].bam)

rule sort_bam:
    input:
        get_bam
	output:
		temp(SCRATCH + "/AN_WGS/raw/{sample}.sorted.bam")
	threads: 80
	shell:
		"""
        {SGL_SAREK_CMD} samtools sort -n \
            -o {output} -@ {threads} {input}
		"""

rule fastq_to_bam:
	input:
		SCRATCH + "/AN_WGS/raw/{sample}.sorted.bam"
    output:
        r1 = SCRATCH + "/AN_WGS/raw/{sample}_R1.fastq.gz",
        r2 = SCRATCH + "/AN_WGS/raw/{sample}_R2.fastq.gz"
    threads: 80
    shell:
        """
        {SGL_SAREK_CMD} samtools fastq -1 {output.r1} -2 {output.r2} \
            -O -t --threads {threads} {input}
        """
