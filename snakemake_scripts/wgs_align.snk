###
###	Step 1: BWA-MEM Alignment
###
def bwa_mem_fastq1(wildcards):
	return expand(INPUT[INPUT.Sample_Lane == wildcards.sample_lane].Fastq1)

def bwa_mem_fastq2(wildcards):
	return expand(INPUT[INPUT.Sample_Lane == wildcards.sample_lane].Fastq2)

rule fastqc:
	input:
			fastq1 = bwa_mem_fastq1,
			fastq2 = bwa_mem_fastq2
	output:
		o1 = OUTDIR + "/QC/{sample_lane}/{sample_lane}_R1_fastqc.html",
		o2 = OUTDIR + "/QC/{sample_lane}/{sample_lane}_R2_fastqc.html",
		o3 = OUTDIR + "/QC/{sample_lane}/{sample_lane}_R1_fastqc.zip",
		o4 = OUTDIR + "/QC/{sample_lane}/{sample_lane}_R2_fastqc.zip"
	threads: 4
	resources:
		time = 6*60,
		mem_mb = 8500
	container:
		config["singularity"]["fastqc"]
	group: "fastqc"
	shell:
		"""
		fastqc -t {threads} {input} --outdir={OUTDIR}/QC/{wildcards.sample_lane}/
		mv {OUTDIR}/QC/{wildcards.sample_lane}/*R1*_fastqc.html {OUTDIR}/QC/{wildcards.sample_lane}/{wildcards.sample_lane}_R1_fastqc.html
		mv {OUTDIR}/QC/{wildcards.sample_lane}/*R2*_fastqc.html {OUTDIR}/QC/{wildcards.sample_lane}/{wildcards.sample_lane}_R2_fastqc.html
		mv {OUTDIR}/QC/{wildcards.sample_lane}/*R1*_fastqc.zip {OUTDIR}/QC/{wildcards.sample_lane}/{wildcards.sample_lane}_R1_fastqc.zip
		mv {OUTDIR}/QC/{wildcards.sample_lane}/*R2*_fastqc.zip {OUTDIR}/QC/{wildcards.sample_lane}/{wildcards.sample_lane}_R2_fastqc.zip
		"""

def createRG(wildcards):
		return expand("@RG\\tID:{idRun}\\tPU:{idRun}\\tSM:{idSample}\\tLB:{idSample}\\tPL:illumina",
		idRun = INPUT[INPUT.Sample_Lane == wildcards.sample_lane].Lane,
		idSample = INPUT[INPUT.Sample_Lane == wildcards.sample_lane].Sample)

rule bwa_mem:
	input:
		fastq1 = bwa_mem_fastq1,
		fastq2 = bwa_mem_fastq2,
		ref_fasta = OUTDIR + "/reference/" + config["reference"]["fasta"]
		#fastq1= INPUT[INPUT.Sample_Lane == {sample_lane}].Fastq1,
		#fastq2= INPUT[INPUT.Sample_Lane == {sample_lane}].Fastq2
	output:
		temp(OUTDIR +"/orphan/{sample_lane}/{sample_lane}.bwa.sam")
	threads: 32
	resources:
		time = 24*60,
		mem_mb = 32000
	container:
		config["singularity"]["bwa"]
	params:
		readGroup = createRG
	shell:
		"""
		bwa mem -K 100000000 -R \"{params.readGroup}\" -B 3 -t {threads} -M {REF_fasta} \
			{input.fastq1} {input.fastq2} > {output}
		"""

rule sort_sam_to_bam:
	input:
		sam = OUTDIR +"/orphan/{sample_lane}/{sample_lane}.bwa.sam"
	output:
		bam = temp(OUTDIR +"/orphan/{sample_lane}/{sample_lane}.bwa.bam")
	threads: 8
	resources:
		time = 16*60,
		mem_mb = 28000
	container:
		config["singularity"]["samtools"]
	params:
		temp = OUTDIR +"/orphan/{sample_lane}/"
	shell:
		"""
		samtools sort -T {params.temp} --threads {threads} -m 3G {input.sam} > {output}
		"""
