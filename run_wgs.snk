#### USAGE
#### 1) First load snakemake
#### module load NiaEnv/2018a
#### module load python/3.6.4-anaconda5.1.0
#### source activate snakemake
#### snakemake -s AN_WGS_script/Snakefile  --cores 1 -j 40 --cluster "sbatch -N 1 -t 20:00:00 --ntasks 80 --output=logs/%x_%j.log" --ri \
#### --config input=AN_WGS_script/Sample/20200907.tsv.txt outdir=$SCRATCH/AN_WGS_script/20200908_HPV_HNSCC_WGS

import pandas as pd
import os
import time

# initial settings

#TMP = "$SCRATCH/temp"

localrules: all, symlink_reffiles, generate_intervals

###
### LOAD SAMPLES
###

configfile: "AN_WGS_script/graham_config.yaml"

print("\n***INPUT FILE: " + config['input'] + "***\n")
INPUT = pd.read_csv(config['input'],names = ['Patient','Sex','n_vs_t','Sample','Lane','Fastq1','Fastq2'],header=0)
INPUT['Lane'] = INPUT.Lane.apply(str)
INPUT['Sample_Lane'] = INPUT.Sample + "_" + INPUT.Lane
SAMPLE =  INPUT['Sample'].unique()
PAT = INPUT.Patient.drop_duplicates()
TUMOR = INPUT[(INPUT.n_vs_t == 1)].Sample.drop_duplicates()
SAMPLE_LANE = INPUT.Sample_Lane
print(INPUT)

### PRINT OUTPUT DIRECTORY
OUTDIR = config['outdir']
print("***OUTPUT DIRECTORY: " + OUTDIR + "***")

###
### GET SAMPLES TO USE MULTI-TUMOUR VARIANT CALLING
###
Multi = INPUT[(INPUT.n_vs_t == 1)]
Multi = Multi[['Patient','Sample']].drop_duplicates()
Multi.loc[:,'Combined'] = ""
Multi.loc[:,"num_tumours"] = 1
for x in Multi['Patient'].drop_duplicates():
	COMBINED_mutect_samples = ""
	print(x)
	n = 1
	for y in Multi[Multi.Patient == x].Sample.drop_duplicates():
		print(y)
		COMBINED_mutect_samples = y + "_" + COMBINED_mutect_samples
		Multi.loc[(Multi.Patient == x),'num_tumours'] = n
		n = n + 1
	COMBINED_mutect_samples = COMBINED_mutect_samples[:-1]
	Multi.loc[(Multi.Patient == x),'Combined']= COMBINED_mutect_samples

Multi['path'] = OUTDIR + "/results/mutect2_multi/"  + Multi.Combined + "_vs_" + Multi.Patient + "-N/" \
+ Multi.Combined + "_vs_" + Multi.Patient + "-N_snpEff.ann.vcf.gz"
if config['run_phylowgs'] == "True":
	Multi['phylowgs_path'] = OUTDIR + "/results/phyloWGS/" + Multi.Combined + "_vs_" + Multi.Patient + "-N/trees.zip"
	Multi['phylowgs_tree_json_path'] = OUTDIR + "/results/phyloWGS/" + Multi.Combined + "_vs_" + Multi.Patient + "-N/tree_likelihoods.txt"
	phylowgs_output_list = 	Multi.phylowgs_path.drop_duplicates().tolist(),
	phylowgs_tree_output_list = Multi.phylowgs_tree_json_path.drop_duplicates().tolist()
Multi = Multi[Multi.num_tumours > 1]


###
###	REFERENCE FILES
###
REF_fasta = config["reference"]["directory"] + config["reference"]["fasta"]
REF_dbsnp = config["reference"]["directory"] + config["reference"]["dbsnp"]
REF_known_indels = config["reference"]["directory"] + config["reference"]["known_indels"]
REF_gnomAD = config["reference"]["directory"] + config["reference"]["gnomAD"]
REF_pon = config["reference"]["directory"] + config["reference"]["pon"]
REF_exac_common = config["reference"]["directory"] + config["reference"]["exac_common"]
### Some settings for TITAN
CLUST = {1:[1], 2:[1,2], 3:[1,2,3], 4:[1,2,3,4], 5:[1,2,3,4,5], 6:[1,2,3,4,5,6], 7:[1,2,3,4,5,6,7], 8:[1,2,3,4,5,6,7,8], 9:[1,2,3,4,5,6,7,8,9], 10:[1,2,3,4,5,6,7,8,9,10]}
PLOIDY = {2:[2], 3:[2,3], 4:[2,3,4]}
CHRS = ['chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10','chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21','chr22','chrX']

###
### Final Results
###
rule all:
	input:
		###FASTQC + BWA Alignment
		expand(OUTDIR + "/QC/{sample_lane}/{sample_lane}_R1_fastqc.html", sample_lane = SAMPLE_LANE),
		expand(OUTDIR + "/Recal/{sample}.recal.bam", sample = SAMPLE),
		### using zip https://endrebak.gitbooks.io/the-snakemake-book/chapters/expand/expand.html
		###BAMQC + samtools_stats
		expand(OUTDIR + "/QC/{sample}/{sample}.samtools.stats.out",sample = SAMPLE),
		expand(OUTDIR + "/QC/{sample}/bamQC/qualimapReport.html",sample = SAMPLE),
		####
		####VARIANT CALLING OUTPUTS
		####
		expand(OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		Multi.path.drop_duplicates().tolist(),
		#### Manta
		expand(OUTDIR + "/results/Manta/{tumor}_vs_{patient}-N/Manta_snpeff_{tumor}_vs_{patient}-N.candidateSV.ann.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR + "/results/Manta/{tumor}_vs_{patient}-N/Manta_snpeff_{tumor}_vs_{patient}-N.candidateSmallIndels.ann.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR + "/results/Manta/{tumor}_vs_{patient}-N/Manta_snpeff_{tumor}_vs_{patient}-N.diploidSV.ann.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR + "/results/Manta/{tumor}_vs_{patient}-N/Manta_snpeff_{tumor}_vs_{patient}-N.somaticSV.ann.vcf.gz",zip, patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		###TitanCNA
		expand(OUTDIR + "/filtered/{samples}.filtered.bam", samples=SAMPLE),
		expand(OUTDIR + "/results/titan/hetPosns/{tumor}/{tumor}.{chr}.vcf",tumor = TUMOR,chr=CHRS),
		expand(OUTDIR + "/results/titan/tumCounts/{tumor}/{tumor}.tumCounts.{chr}.txt",tumor = TUMOR,chr=CHRS),
		expand(OUTDIR + "/results/readDepth/{samples}.bin{binSize}.wig",samples=SAMPLE,binSize=str(config["titan"]["binSize"])),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["titan"]["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["titan"]["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.params.txt",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["titan"]["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["titan"]["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.segs.txt",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["titan"]["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["titan"]["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.seg",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["titan"]["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["titan"]["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/{tumor}_vs_{patient}-N_optimalClusterSolution.txt",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR+ "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/",patient = [x.rsplit('-',1)[0] for x in TUMOR],tumor = TUMOR),
		### phylowgs output
		#phylowgs_output_list,
		#phylowgs_tree_output_list,
		#### ASCAT
		expand(OUTDIR + "/results/ASCAT/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.tumor.cnvs.txt",zip, tumor = TUMOR, patient = [x.rsplit('-',1)[0] for x in TUMOR])
		#### QC
		#expand("reports/{patient}_multiqc.html",patient = PAT)
	threads: 1
	container:
		config["singularity"]["multiqc"]
	params:
		time = time.strftime('%Y%m%d')
	shell:
		"""
		multiqc {OUTDIR} -n {OUTDIR}/pipeline_info/reports/multiqc_{params.time}.html
		mv multiqc_data* OUTDIR/pipeline_info/report/
		cp config['input'] {OUTDIR}/Sample_{params.time}.csv
		"""


###
### Step by step
###


### Symlink all reference files to make singularity easier
rule symlink_reffiles:
	input:
		config["reference"]["directory"] + config["reference"]["fasta"],
		config["reference"]["directory"] + config["reference"]["dbsnp"],
		config["reference"]["directory"] + config["reference"]["known_indels"],
		config["reference"]["directory"] + config["reference"]["gnomAD"],
		config["reference"]["directory"] + config["reference"]["pon"],
		config["reference"]["directory"] + config["reference"]["exac_common"],
		config["reference"]["directory"] + config["reference"]["ascat_acloci"],
		config["reference"]["directory"] + config["reference"]["ascat_acloci_gc"]
	output:
		OUTDIR + "/reference/" + config["reference"]["fasta"],
		OUTDIR + "/reference/" + config["reference"]["dbsnp"],
		OUTDIR + "/reference/" + config["reference"]["known_indels"],
		OUTDIR + "/reference/" + config["reference"]["gnomAD"],
		OUTDIR + "/reference/" + config["reference"]["pon"],
		OUTDIR + "/reference/" + config["reference"]["exac_common"],
		OUTDIR + "/reference/" + config["reference"]["ascat_acloci"],
		OUTDIR + "/reference/" + config["reference"]["ascat_acloci_gc"]
	threads: 1
	params:
		original_ref_dir = config["reference"]["directory"],
		target_ref_dir = OUTDIR + "/reference/"
	shell:
		"""
		ln -sf {params.original_ref_dir}* {params.target_ref_dir}
		"""

##SET NUMBERS FROM 0000 to 0099
NUMBERS = [str(a)+str(b)+str(c)+str(d) for a in range(0,1) for b in range(0,1) for c in range(0,10) for d in range(0,10)]

rule generate_intervals:
	input:
		ref_fasta = OUTDIR + "/reference/" + config["reference"]["fasta"]
	output:
		expand(OUTDIR + "/pipeline_info/intervals/{num}-scattered.interval_list", num = NUMBERS)
	threads: 1
	resources:
		time = 60,
		mem_mb = 2500
	container:
		config["singularity"]["gatk"]
	shell:
		"""
		gatk --java-options "-Xmx2g" SplitIntervals \
		-R {input.ref_fasta} \
		--scatter-count 100 \
		-O {OUTDIR}/pipeline_info/intervals
		"""


###Align
include: "snakemake_scripts/wgs_align.snk"

###Markdup recal
include: "snakemake_scripts/wgs_markdup_recal.snk"

###Bam QC
include: "snakemake_scripts/bam_qc.snk"

### Mutect2 individual
include: "snakemake_scripts/wgs_mutect2_individual.snk"

### Mutect2 co-variant calling mode
include: "snakemake_scripts/wgs_mutect2_together.snk"

### Manta
include: "snakemake_scripts/wgs_manta.snk"

### ASCAT
include: "snakemake_scripts/wgs_ascat.snk"

### TitanCNA
include: "snakemake_scripts/titan_cna/wgs_titanCNA.snk"
