####
####	To run:
####	snakemake -s AN_WGS_script/titanCNA.snk -j 10 --cluster "sbatch -N 1 -t 4:00:00 --ntasks 80 --output=logs/%x_%j.log" --ri --config input=Sample_20210118.tsv outdir=/gpfs/fs0/scratch/n/nicholsa/zyfniu/AN_WGS/20210118_HPV_WGS --local-cores 4 --latency-wait 60
####

import pandas as pd
import os

### runTitanCNA must be ran on the log in node bc it requires internet access to download files
localrules: runTitanCNA,selectSolution,copyOptSolution

### PRINT OUTPUT DIRECTORY
OUTDIR = config['outdir']
print("***OUTPUT DIRECTORY: " + OUTDIR + "***")
### Config file
configfile: "/scratch/n/nicholsa/zyfniu/AN_WGS/AN_WGS_script/titanCNA_config.yaml"

###
### LOAD SAMPLES
###
SCRATCH = "/gpfs/fs0/scratch/n/nicholsa/zyfniu"
print("\n***INPUT FILE: " + config['input'] + "***\n")
INPUT = pd.read_table(config['input'],names = ['Patient','Sex','n_vs_t','Sample','Lane','Fastq1','Fastq2'])
INPUT['Lane'] = INPUT.Lane.apply(str)
INPUT['Sample_Lane'] = INPUT.Sample + "_" + INPUT.Lane
SAMPLE =  INPUT['Sample'].unique()
TMP = "temp"
PAT = INPUT.Patient.drop_duplicates()
TUMOR = INPUT[(INPUT.n_vs_t == 1)].Sample.drop_duplicates()
SAMPLE_LANE = INPUT.Sample_Lane
print(INPUT)

###
###
Multi = INPUT[(INPUT.n_vs_t == 1)]
Multi = Multi[['Patient','Sample']].drop_duplicates()
Multi.loc[:,'Combined'] = ""
Multi.loc[:,"num_tumours"] = 1
for x in Multi['Patient'].drop_duplicates():
	COMBINED_mutect_samples = ""
	print(x)
	n = 1
	for y in Multi[Multi.Patient == x].Sample.drop_duplicates():
		print(y)
		COMBINED_mutect_samples = y + "_" + COMBINED_mutect_samples
		Multi.loc[(Multi.Patient == x),'num_tumours'] = n
		n = n + 1
	COMBINED_mutect_samples = COMBINED_mutect_samples[:-1]
	Multi.loc[(Multi.Patient == x),'Combined']= COMBINED_mutect_samples

Multi['path'] = OUTDIR + "/results/mutect2/all_"  + Multi.Combined + "_vs_" + Multi.Patient + "-N/" \
+ Multi.Combined + "_vs_" + Multi.Patient + "-N_snpEff.ann.vcf.gz"
Multi['phylowgs_path'] = OUTDIR + "/results/phyloWGS/" + Multi.Combined + "_vs_" + Multi.Patient + "-N/trees.zip"
Multi['phylowgs_tree_json_path'] = OUTDIR + "/results/phyloWGS/" + Multi.Combined + "_vs_" + Multi.Patient + "-N/tree_likelihoods.txt"
Multi = Multi[Multi.num_tumours > 1]
###


CLUST = {1:[1], 2:[1,2], 3:[1,2,3], 4:[1,2,3,4], 5:[1,2,3,4,5], 6:[1,2,3,4,5,6], 7:[1,2,3,4,5,6,7], 8:[1,2,3,4,5,6,7,8], 9:[1,2,3,4,5,6,7,8,9], 10:[1,2,3,4,5,6,7,8,9,10]}
PLOIDY = {2:[2], 3:[2,3], 4:[2,3,4]}
CHRS = ['chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10','chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21','chr22','chrX']

rule all:
	input:
		### filtered bam
		expand(OUTDIR + "/filtered/{samples}.filtered.bam", samples=SAMPLE),
		expand(OUTDIR + "/results/titan/hetPosns/{tumor}/{tumor}.{chr}.vcf",tumor = TUMOR,chr=CHRS),
		expand(OUTDIR + "/results/titan/tumCounts/{tumor}/{tumor}.tumCounts.{chr}.txt",tumor = TUMOR,chr=CHRS),
		expand(OUTDIR + "/results/readDepth/{samples}.bin{binSize}.wig",samples=SAMPLE,binSize=str(config["binSize"])),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt",patient = [x[:-2] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.params.txt",patient = [x[:-2] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.segs.txt",patient = [x[:-2] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.seg",patient = [x[:-2] for x in TUMOR],tumor = TUMOR,clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["TitanCNA_maxPloidy"]]),
		expand(OUTDIR + "/results/titan/hmm/{tumor}_vs_{patient}-N_optimalClusterSolution.txt",patient = [x[:-2] for x in TUMOR],tumor = TUMOR),
		expand(OUTDIR+ "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/",patient = [x[:-2] for x in TUMOR],tumor = TUMOR),
		Multi.phylowgs_path.drop_duplicates().tolist(),
		Multi.phylowgs_tree_json_path.drop_duplicates().tolist()

###
###
###

rule filter_bam:
	input:
		OUTDIR +"/Recal/{samples}.recal.bam",
	output:
		OUTDIR + "/filtered/{samples}.filtered.bam"
	params:
		chrs=config["chrs"]
	group:	"titan"
	threads: 79
	shell:
		"""
		singularity exec -B \
		$SCRATCH/igenomes_ref,$SCRATCH/AN_WGS,{OUTDIR} \
 		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img samtools view \
		-L /scratch/n/nicholsa/zyfniu/igenomes_ref/hg38.chrom.bed -@ {threads} -o {output} {input}
		singularity exec -B \
		$SCRATCH/igenomes_ref,$SCRATCH/AN_WGS,{OUTDIR} \
 		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img \
		samtools index {output}
		"""

rule filter_mutect2_passOnly:
	input:
		annotatedvcf = OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.vcf.gz"
	output: annotatedvcf = OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.vcf.gz"
	threads: 1
	group: "filter"
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR} \
			/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img bcftools view -f "PASS" {input} |\
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img bgzip > {output}
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img tabix -p vcf {output}
		"""

rule filter_mutect2_to_variants_of_interest:
	input:
		annotatedvcf = OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.vcf.gz"
	output: annotatedvcf = OUTDIR + "/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.inGenes.vcf.gz"
	threads: 1
	group: "filter"
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR} \
			/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img bcftools filter \
			{input} --exclude \'INFO/ANN ~ \"intron\" | INFO/ANN ~ \"intergenic_region\" | INFO/ANN ~ \"intragenic_variant\"\' -O z> {output}
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img tabix -p vcf {output}
		"""

####
#### GET AlleleCounts
####

rule getHETsites:
	input:
		OUTDIR + "/filtered/{tumor}.filtered.bam"
	output:
		OUTDIR + "/results/titan/hetPosns/{tumor}/{tumor}.{chr}.vcf"
	params:
		refFasta=config["refFasta"],
		snpDB=config["snpVCF"]
	#	samtoolsCmd=config["samTools"],
	#	bcftoolsCmd=config["bcfTools"]
	group: "titan"
	threads: 2
	log:
		OUTDIR + "/logs/titan/hetPosns/{tumor}/{tumor}.{chr}.log"
	shell:
		"singularity exec -B \
		$SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,{OUTDIR} \
 		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img \
		samtools mpileup -uv -I -f {params.refFasta} -r {wildcards.chr} \
		-l {params.snpDB} {input} | singularity exec -B \
		$SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,{OUTDIR} \
		 /gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img \
		 bcftools call -v -c - | grep -e '0/1' -e '#' > {output} 2> {log}"


rule getAlleleCountsByChr:
	input:
		hetSites=OUTDIR + "/results/titan/hetPosns/{tumor}/{tumor}.{chr}.vcf",
		tumBam= OUTDIR + "/filtered/{tumor}.filtered.bam"
	output:
		OUTDIR + "/results/titan/tumCounts/{tumor}/{tumor}.tumCounts.{chr}.txt"
	params:
		countScript=config["pyCountScript"],
		#pyEnv=config["pyEnv"],
		#refFasta=config["refFasta"],
		mapQ=config["map_quality"],
		baseQ=config["base_quality"],
		vcfQ=config["vcf_quality"]
	group: "titan"
	threads: 2
	log:
		OUTDIR + "/logs/titan/tumCounts/{tumor}/{tumor}.{chr}.log"
	shell:
		"singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/nfcore-sarek-2.6.img python \
		{params.countScript} {wildcards.chr} {input.hetSites} {input.tumBam} {params.baseQ} \
		{params.mapQ} {params.vcfQ} > {output} 2> {log}"


def get_alleleCounts(wildcards):
	return expand(OUTDIR + "/results/titan/tumCounts/{tumor}/{tumor}.tumCounts.{chr}.txt", tumor = wildcards.tumor, chr=CHRS)

rule catAlleleCountFiles:
	input:
		get_alleleCounts
	output:
		OUTDIR + "/results/titan/tumCounts/{tumor}.tumCounts.txt"
	group:	"titan"
	threads: 2
	log:
		OUTDIR + "/logs/titan/tumCounts/{tumor}/{tumor}.cat.log"
	shell:
		"cat {input} | grep -v Chr > {output} 2> {log}"

###
###	ICHOR
###

rule read_counter:
	input:
		OUTDIR + "/filtered/{samples}.filtered.bam"
	output:
		OUTDIR + "/results/readDepth/{samples}.bin{binSize}.wig"
	params:
		binSize=config["binSize"],
		qual="20",
		chrs=config["chrs"]
	resources:
		mem=4
	group:"titan"
	log:
		OUTDIR + "/logs/readDepth/{samples}.bin{binSize}.log"
	shell:
		"singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/ichorcna_pz.simg readCounter \
		{input} -c {params.chrs} -w {params.binSize} -q {params.qual} > {output} 2> {log}"

rule ichorCNA:
	input:
		tum=OUTDIR + "/results/readDepth/{tumor}.bin" + str(config["binSize"]) + ".wig",
		norm=OUTDIR + "/results/readDepth/{patient}-N.bin" + str(config["binSize"]) + ".wig",
	output:
		corrDepth=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.correctedDepth.txt",
		param=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.params.txt",
		cna=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.cna.seg",
		segTxt=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.seg.txt",
		#seg="results/ichorCNA/{tumor}/{tumor}.seg",
		#rdata="results/ichorCNA/{tumor}/{tumor}.RData",
	params:
		outDir=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/",
		rscript=config["ichorCNA_rscript"],
		libdir=config["ichorCNA_libdir"],
		id="{tumor}_vs_{patient}-N",
		ploidy=config["ichorCNA_ploidy"],
		normal=config["ichorCNA_normal"],
		genomeStyle=config["genomeStyle"],
		gcwig=config["ichorCNA_gcWig"],
		mapwig=config["ichorCNA_mapWig"],
		estimateNormal=config["ichorCNA_estimateNormal"],
		estimatePloidy=config["ichorCNA_estimatePloidy"],
		estimateClonality=config["ichorCNA_estimateClonality"],
		scStates=config["ichorCNA_scStates"],
		maxCN=config["ichorCNA_maxCN"],
		includeHOMD=config["ichorCNA_includeHOMD"],
		chrs=config["ichorCNA_chrs"],
		#chrTrain=config["ichorCNA_chrTrain"],
		centromere=config["centromere"],
		exons=config["ichorCNA_exons"],
		txnE=config["ichorCNA_txnE"],
		txnStrength=config["ichorCNA_txnStrength"],
		fracReadsChrYMale="0.001",
		plotFileType=config["ichorCNA_plotFileType"],
		plotYlim=config["ichorCNA_plotYlim"]
	resources:
		mem=4
	group:	"titan"
	log:
		OUTDIR + "/logs/ichorCNA/{tumor}_vs_{patient}-N.log"
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/ichorcna_pz.simg Rscript {params.rscript} \
		--libdir {params.libdir} --id {params.id} --WIG {input.tum} --gcWig {params.gcwig} --mapWig {params.mapwig} --NORMWIG {input.norm} \
		--ploidy \"{params.ploidy}\" --normal \"{params.normal}\" --maxCN {params.maxCN} --includeHOMD {params.includeHOMD} --genomeStyle {params.genomeStyle} \
		--chrs \"{params.chrs}\" --estimateNormal {params.estimateNormal} --estimatePloidy {params.estimatePloidy} --estimateScPrevalence {params.estimateClonality} \
		--scStates \"{params.scStates}\" --centromere {params.centromere} --exons.bed {params.exons} --txnE {params.txnE} --txnStrength {params.txnStrength} \
		--fracReadsInChrYForMale {params.fracReadsChrYMale} --plotFileType {params.plotFileType} --plotYLim \"{params.plotYlim}\" --outDir {params.outDir} > {log} 2> {log}
		"""
###
###	TITAN
###
rule runTitanCNA:
	input:
		alleleCounts=OUTDIR + "/results/titan/tumCounts/{tumor}.tumCounts.txt",
		corrDepth=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.correctedDepth.txt"
	output:
		titan=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt",
		param=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.params.txt",
		segTxt=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.segs.txt",
		seg=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.seg"
	params:
		outRoot=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}/",
		titanRscript=config["TitanCNA_rscript"],
		libdir=config["TitanCNA_libdir"],
		numCores=config["TitanCNA_numCores"],
		normal=config["TitanCNA_normalInit"],
		chrs=config["TitanCNA_chrs"],
		sex=config["sex"],
		genomeStyle=config["genomeStyle"],
		genomeBuild=config["genomeBuild"],
		cytobandFile=config["cytobandFile"],
		estimatePloidy=config["TitanCNA_estimatePloidy"],
		estimateClonality=config["TitanCNA_estimateClonality"],
		estimateNormal=config["TitanCNA_estimateNormal"],
		centromere=config["centromere"],
		alphaK=config["TitanCNA_alphaK"],
		#alphaR=config["TitanCNA_alphaR"],
		#alleleModel=config["TitanCNA_alleleModel"],
		txnExpLen=config["TitanCNA_txnExpLen"],
		plotYlim=config["TitanCNA_plotYlim"]
	group:	"titan"
	threads: 2
	log:
		OUTDIR + "/logs/titan/hmm/titanCNA_ploidy{ploidy}/run_titanCNA_{tumor}_vs_{patient}-N_cluster{clustNum}.log"
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/ichorcna_pz.simg Rscript {params.titanRscript} \
		--hetFile {input.alleleCounts} --cnFile {input.corrDepth} --outFile {output.titan} --outSeg {output.segTxt} \
		--outParam {output.param} --outIGV {output.seg} --outPlotDir {params.outRoot} --libdir {params.libdir} --id {wildcards.tumor}_vs_{wildcards.patient}-N \
		--numClusters {wildcards.clustNum} --numCores {params.numCores} --normal_0 {params.normal} --ploidy_0 {wildcards.ploidy} \
		--genomeStyle {params.genomeStyle} --genomeBuild {params.genomeBuild} --cytobandFile {params.cytobandFile} --chrs \"{params.chrs}\" \
		--gender {params.sex} --estimateNormal {params.estimateNormal} --estimatePloidy {params.estimatePloidy} --estimateClonality {params.estimateClonality}  \
		--centromere {params.centromere} --alphaK {params.alphaK} --txnExpLen {params.txnExpLen} --plotYlim \"{params.plotYlim}\" > {log} 2> {log}
		"""

rule combineTitanAndIchorCNA:
	input:
		titanSeg=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.segs.txt",
		titanBin=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt",
		titanParam=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.params.txt",
		ichorSeg=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.seg.txt",
		ichorBin=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.cna.seg",
		ichorParam=OUTDIR + "/results/ichorCNA/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.params.txt"
	output:
		segFile=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.ichor.seg.txt",
		binFile=OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.ichor.cna.txt",
	params:
		combineScript=config["TitanCNA_combineTitanIchorCNA"],
		libdir=config["TitanCNA_libdir"],
		centromere=config["centromere"],
		sex=config["sex"],
		mergeIchorHOMD=config["mergeIchorHOMD"]
	group:	"titan"
	threads: 2
	log:
		OUTDIR + "/logs/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.combineTitanIchorCNA.log"
	shell:
		"singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/ichorcna_pz.simg Rscript {params.combineScript} --libdir {params.libdir} \
		--titanSeg {input.titanSeg} --titanBin {input.titanBin} --titanParam {input.titanParam} --ichorSeg {input.ichorSeg} --ichorBin {input.ichorBin} \
		--ichorParam {input.ichorParam} --mergeIchorHOMD {params.mergeIchorHOMD} --sex {params.sex} --outSegFile {output.segFile} --outBinFile {output.binFile} \
		--centromere {params.centromere} > {log} 2> {log}"

def get_solutions(wildcards):
	samples = INPUT[INPUT.Patient == wildcards.patient].Sample
	return expand(OUTDIR +"/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt", tumor = wildcards.tumor, patient=wildcards.patient, clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]],ploidy=PLOIDY[config["TitanCNA_maxPloidy"]])

rule selectSolution:
	input:
		get_solutions
		#ploidyDirs=expand("results/titan/hmm/titanCNA_ploidy{ploidy}/", ploidy=PLOIDY[config["TitanCNA_maxPloidy"]]),
		#resultFiles=expand(OUTDIR + "/results/titan/hmm/titanCNA_ploidy{ploidy}/{tumor}_vs_{patient}-N_cluster{clustNum}.titan.txt", tumor=config["pairings"], clustNum=CLUST[config["TitanCNA_maxNumClonalClusters"]], ploidy=PLOIDY[config["TitanCNA_maxPloidy"]])
	output:
		OUTDIR + "/results/titan/hmm/{tumor}_vs_{patient}-N_optimalClusterSolution.txt"
	params:
		solutionRscript=config["TitanCNA_selectSolutionRscript"],
		threshold=config["TitanCNA_solutionThreshold"],
		ploidy2 = OUTDIR + "/results/titan/hmm/titanCNA_ploidy2",
		ploidy3 = OUTDIR + "/results/titan/hmm/titanCNA_ploidy3",
		ploidy4 = OUTDIR + "/results/titan/hmm/titanCNA_ploidy4"
	group:	"phylowgs"
	threads: 2
	log:
		OUTDIR + "/logs/titan/selectSolution_{tumor}_vs_{patient}-N.log"
	shell:
		"""
		ploidyRun2={params.ploidy2}
		if [ -d {params.ploidy3} ]; then
			ploidyRun3={params.ploidy3}
		else
			ploidyRun3=NULL
		fi
		if [ -d {params.ploidy4} ]; then
			ploidyRun4={params.ploidy4}
		else
			ploidyRun4=NULL
		fi
		singularity exec -B $SCRATCH/igenomes_ref,$SCRATCH/AN_WGS/AN_WGS_script,$SCRATCH/singularity_images,{OUTDIR} \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/ichorcna_pz.simg Rscript {params.solutionRscript} \
		--ploidyRun2 $ploidyRun2 --ploidyRun3 $ploidyRun3 --ploidyRun4 $ploidyRun4 --threshold {params.threshold} --outFile {output} > {log} 2> {log}
		"""

rule copyOptSolution:
	input:
		OUTDIR + "/results/titan/hmm/{tumor}_vs_{patient}-N_optimalClusterSolution.txt"
	output:
		dir = directory(OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/"),
		segs = OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.segs.txt"
	params:
	log:
		OUTDIR + "/logs/titan/hmm/optSolution/copyOptSolution_{tumor}_vs_{patient}-N.log"
	group:	"phylowgs"
	threads: 2
	shell:
		"""
		curDir=`pwd`
		for i in `cut -f11 {input} | grep -v "path"`;
		do
			echo -e "Copying ${{i}} to {output.dir}"
			cp -r ${{i}}* {output.dir}
			cp -r ${{i}}.segs.txt {output.segs}
		done
		"""

###
###	phyloWGS
###

rule parseCNV:
	input:
		segs = OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.segs.txt",
		ploidy = OUTDIR + "/results/ASCAT/{tumor}_vs_{patient}-N/{tumor}.purityploidy.txt"
	output:
		OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.txt"
	params:
		awk_command = "awk 'FNR == 2{{print $1}}' " + OUTDIR + "/results/ASCAT/{tumor}_vs_{patient}-N/{tumor}.purityploidy.txt"
	threads: 1
	group: "phylowgs"
	run:
		import subprocess
        	import os.path
		ploidy = (subprocess.check_output({params.awk_command}, shell = True)).rstrip().decode()
		command = "singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR},$SCRATCH/AN_WGS/AN_WGS_script /gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/phylowgs.simg python2.7 $SCRATCH/AN_WGS/AN_WGS_script/phylowgs_parser/parse_cnvs.py -f titan -c " + ploidy + " --cnv-output {output} {input.segs}"
		shell(command)

### replace chr1...23 with 1...23 before using phylowgs parser
rule fixParsedCNV:
	input:
		OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.txt"
	output:
		OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.fixed.txt"
	threads: 1
	group: "phylowgs"
	shell:
		"""
		sed -e 's/chr//g' {input} > {output}
		sed -i -e 's/omosome/chromosome/g' {output}
		"""

def get_vcfs_for_phylowgs_files(wildcards):
	samples = Multi[Multi.Patient == wildcards.patient].Sample
	return expand(OUTDIR +"/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.inGenes.vcf.gz", tumor = samples, patient = wildcards.patient)

def get_parsedCNVs_for_phylowgs_files(wildcards):
	samples = Multi[Multi.Patient == wildcards.patient].Sample
	return expand(OUTDIR +"/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.fixed.txt", tumor = samples, patient = wildcards.patient)

def cnvs_param(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	cnv_param = ""
	for y in multi.Sample.drop_duplicates():
		cnv_param = cnv_param + "--cnvs " + y + "=" + OUTDIR + "/results/phyloWGS/input/"+ y + "_vs_" + wildcards.patient + "-N_cnvs.fixed.txt "
	print(cnv_param)
	return cnv_param

def vcf_files(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	vcf_files = ""
	for y in multi.Sample.drop_duplicates():
		vcf_files = vcf_files + y + "=" + OUTDIR + "/results/mutect2/" + y + "_vs_" + wildcards.patient + "-N/" + y + "_vs_" + wildcards.patient + "-N_snpEff.ann.passOnly.inGenes.vcf.gz" + " "
	print(vcf_files)
	return vcf_files

def vcf_format(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	vcf_format = ""
	for y in multi.Sample.drop_duplicates():
		vcf_format = vcf_format + "--vcf-type " + y + "=mutect_smchet "
	print(vcf_format)
	return vcf_format





rule parseSNVfromMutect:
	input:
		cnvs = get_parsedCNVs_for_phylowgs_files,
		passOnlyvcf =  get_vcfs_for_phylowgs_files
	output:
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		params = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_params.json"
	params:
		cnv_files = cnvs_param,
		vcf_files = vcf_files,
		vcf_format = vcf_format
	threads: 1
	group: "phylowgs"
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR},$SCRATCH/AN_WGS/AN_WGS_script \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/phylowgs.simg python2.7 \
		$SCRATCH/AN_WGS/AN_WGS_script/phylowgs_parser/create_phylowgs_inputs.py \
		{params.vcf_format} --regions normal_and_abnormal_cn \
		{params.cnv_files} \
		--output-cnvs {output.cnv} \
		--output-variants {output.ssm} \
		--output-params {output.params} \
		{params.vcf_files}
		"""

	##	--tumor-sample HPV54-R
rule phyloWGS:
	input:
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		params = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_params.json"
	output:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/trees.zip"
	threads: 80
	group: "phylowgs"
	params:
		output_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/",
		temp_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/chains"
	shell:
		"""
		mkdir -p {params.temp_dir}
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR},$SCRATCH/singularity_images \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/phylowgs.simg python2.7 /opt/phylowgs/multievolve.py \
		--num-chains {threads} --ssms {input.ssm} --cnvs {input.cnv} --params {input.params} \
		-O {params.output_dir} -t {params.temp_dir}/
		"""

rule output_phyloWGS_results:
	input:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/trees.zip"
	output:
		tree_summary_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json.gz",
        mutlist_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.muts.json.gz",
		mutass_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.mutass.zip"
	group: "phylowgs"
	threads: 2
	shell:
		"""
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR},$SCRATCH/singularity_images \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/phylowgs.simg python2.7 /opt/phylowgs/write_results.py \
		{wildcards.tumour}_vs_{wildcards.patient}-N {input} {output.tree_summary_output} {output.mutlist_output} {output.mutass_output}
		"""
### script from https://raw.githubusercontent.com/aleighbrown/pwgs_snakemake/master/parse_pwgs_output.py
rule parse_phyloWGS_summary_into_csv:
	input:
		tree_summary_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json.gz",
		mutass_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.mutass.zip",
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		parser_script = "$SCRATCH/AN_WGS/AN_WGS_script/phylowgs_parser/parse_pwgs_output.py"
	output:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/tree_likelihoods.txt"
	params:
		output_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/",
		unzipped_summary = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json"
	group: "phylowgs"
	threads: 2
	shell:
		"""
		gunzip {input.tree_summary_output}
		singularity exec -B $SCRATCH/igenomes_ref,{OUTDIR},$SCRATCH/AN_WGS/AN_WGS_script \
		/gpfs/fs0/scratch/n/nicholsa/zyfniu/singularity_images/phylowgs.simg python2.7 {input.parser_script} \
		--cnv_input {input.cnv} --ssm_input {input.ssm} \
		--summary_file {params.unzipped_summary}  --mutasgn_path {input.mutass_output} \
		--output_folder {params.output_dir} --k 5
		gzip {params.unzipped_summary}
		"""
