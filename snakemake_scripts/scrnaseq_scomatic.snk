import pandas as pd
import os

localrules: rename_files, copy_final_results, all
envvars:
	"NXF_SINGULARITY_CACHEDIR"
###
### LOAD SAMPLES
###
print("\n***INPUT FILE: " + config['input'] + "***\n")
INPUT = pd.read_csv(config['input'],names = ['Sample','num_cells','lanes','Fastq1','Fastq2'],header=0)
SAMPLE =  INPUT['Sample'].unique()
print(INPUT)


### PRINT OUTPUT DIRECTORY
OUTDIR = config['outdir']
print("***OUTPUT DIRECTORY: " + OUTDIR + "***")

rule all:
	input:
		expand(OUTDIR + "/scomatic/{sample}/Step1_BamCellTypes/job.finish.touch", sample = SAMPLE),
		expand(OUTDIR + "/scomatic/{sample}/Step2_BaseCellCounts/job.finish.touch", sample = SAMPLE),
		expand(OUTDIR + "/scomatic/{sample}/Step4_VariantCalling/step2.job.finish.touch", sample = SAMPLE)

rule split_bam:
	input:
		bam = OUTDIR + "/{sample}/outs/possorted_genome_bam.bam",
		scomatic_script = config["reference"]["directory"] + "SComatic/scripts/SplitBam/SplitBamCellTypes.py",
		barcode = OUTDIR + "/scomatic/barcode_tsv/{sample}_barcodes.tsv"
	output:
		o1 = OUTDIR + "/scomatic/{sample}/Step1_BamCellTypes/job.finish.touch"
	params:
		cellranger_ref_fa = config["reference"]["directory"] + config["reference"]["cellranger_grch38_ref"] + "/fasta/genome.fa"
	threads: 4
	group: "scomatic"
	container:
		config["singularity"]["scomatic"]
	resources:
		time = 6*60,
		mem_mb = 12000
	shell:
		"""
		/bin/bash -c \
			'source activate SComatic; \
			python3 {input.scomatic_script} \
			--bam {input.bam} \
			--meta {input.barcode} \
			--id {wildcards.sample} \
			--n_trim 5 --max_nM 5 --max_NH 1  \
			--outdir ./scomatic/{wildcards.sample}/Step1_BamCellTypes'
		touch {output}
		"""


rule collect_base_count:
	input:
		bam = OUTDIR + "/{sample}/outs/possorted_genome_bam.bam",
		scomatic_script = config["reference"]["directory"] + "SComatic/scripts/BaseCellCounter/BaseCellCounter.py",
		o1 = OUTDIR + "/scomatic/{sample}/Step1_BamCellTypes/job.finish.touch"
	output:
		o1 = OUTDIR + "/scomatic/{sample}/Step2_BaseCellCounts/job.finish.touch"
	params:
		cellranger_ref_fa = config["reference"]["directory"] + config["reference"]["cellranger_grch38_ref"] + "/fasta/genome.fa"
	threads: 20
	group: "scomatic"
	container:
		config["singularity"]["scomatic"]
	resources:
		time = 12*60,
		mem_mb = 12000
	shell:
		""" 

		for bam in $(ls -d {OUTDIR}/scomatic/{wildcards.sample}/Step1_BamCellTypes/*bam);do
			# Cell type
			cell_type=$(basename $bam | awk -F'.' '{print $(NF-1)}')

			# Temp folder
			temp={OUTDIR}/scomatic/{wildcards.sample}/Step2_BaseCellCounts/temp_${cell_type}
			mkdir -p $temp

			# Command line to submit to cluster
			/bin/bash -c \
			'source activate SComatic; \
			python {input.scomatic_script} --bam $bam \
				--ref {params.cellranger_ref_fa} \
				--chrom all \
				--out_folder {OUTDIR}/scomatic/{wildcards.sample}/Step2_BaseCellCounts \
				--min_bq 30 \
				--tmp_dir $temp \
				--nprocs {threads}'

			rm -rf $temp
		done
		touch {output}
		"""

rule merge_base_count_matrix:
	input:
		scomatic_script = config["reference"]["directory"] + "SComatic/scripts/MergeCounts/MergeBaseCellCounts.py",
		o2 = OUTDIR + "/scomatic/{sample}/Step2_BaseCellCounts/job.finish.touch"
	output:
		o1 = OUTDIR + "/scomatic/{sample}/Step3_BaseCellCountsMerged/{sample}.BaseCellCounts.AllCellTypes.tsv"
	params:
		cellranger_ref_fa = config["reference"]["directory"] + config["reference"]["cellranger_grch38_ref"] + "/fasta/genome.fa"
	threads: 20
	group: "scomatic"
	container:
		config["singularity"]["scomatic"]
	resources:
		time = 6*60,
		mem_mb = 12000
	shell:
		""" 
		/bin/bash -c \
			'source activate SComatic; \
			python3 {input.scomatic_script} \
			--tsv_folder {OUTDIR}/scomatic/{wildcards.sample}/Step2_BaseCellCounts \
  			--outfile {output.o1}
  			'
		"""

rule base_calling_step1:
	input:
		scomatic_script = config["reference"]["directory"] + "SComatic/scripts/BaseCellCalling/BaseCellCalling.step1.py",
		base_cell_counts = OUTDIR + "/scomatic/{sample}/Step3_BaseCellCountsMerged/{sample}.BaseCellCounts.AllCellTypes.tsv"
	output:
		o1 = OUTDIR + "/scomatic/{sample}/Step4_VariantCalling/{sample}.calling.step1.tsv"
	params:
		cellranger_ref_fa = config["reference"]["directory"] + config["reference"]["cellranger_grch38_ref"] + "/fasta/genome.fa"
	threads: 20
	group: "scomatic"
	container:
		config["singularity"]["scomatic"]
	resources:
		time = 3*60,
		mem_mb = 12000
	shell:
		""" 
		/bin/bash -c \
			'source activate SComatic; \
			python {input.scomatic_script} \
					--infile {input.base_cell_counts} \
					--outfile {OUTDIR}/scomatic/{wildcards.sample}/Step4_VariantCalling/{wildcards.sample} \
					--ref {params.cellranger_ref_fa}
  			'
		"""

rule base_calling_step2:
	input:
		scomatic_script = config["reference"]["directory"] + "SComatic/scripts/BaseCellCalling/BaseCellCalling.step2.py",
		base_cell_counts = OUTDIR + "/scomatic/{sample}/Step4_VariantCalling/{sample}.calling.step1.tsv",
		editing_ref = config["reference"]["directory"] + "SComatic/RNAediting/AllEditingSites.hg38.txt",
		pon_ref = config["reference"]["directory"] + "SComatic/PoNs/PoN.scRNAseq.hg38.tsv",
	output:
		o1 = OUTDIR + "/scomatic/{sample}/Step4_VariantCalling/step2.job.finish.touch"
	params:
		cellranger_ref_fa = config["reference"]["directory"] + config["reference"]["cellranger_grch38_ref"] + "/fasta/genome.fa"
	threads: 20
	group: "scomatic"
	container:
		config["singularity"]["scomatic"]
	resources:
		time = 3*60,
		mem_mb = 12000
	shell:
		""" 
		/bin/bash -c \
			'source activate SComatic; \
			python {input.scomatic_script} \
					--infile {input.base_cell_counts} \
					--outfile {OUTDIR}/scomatic/{wildcards.sample}/Step4_VariantCalling/{wildcards.sample} \
          			--editing $editing \
          			--pon $PON
  			'
		touch {output}
		"""