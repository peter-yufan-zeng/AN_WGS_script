###
###	phyloWGS
###

rule parseCNV:
	input:
		segs = OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.segs.txt",
		# ploidy = OUTDIR + "/results/ASCAT/{tumor}_vs_{patient}-N/{tumor}.purityploidy.txt"
		titan_optimal_params = OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N.params.txt"
	output:
		OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.txt"
	#params:
#		awk_command = "awk 'FNR == 1{{print $4}}' " + OUTDIR + "/results/titan/hmm/optimalClusterSolution/{tumor}_vs_{patient}-N/{tumor}*.params.txt"
	threads: 1
	group: "prep_phylowgs"
	container:
		config["singularity"]["phylowgs"]
	resources:
		time = 30,
		mem_mb = 8500
	shell:
		"""
		prop_normal=$(awk 'FNR == 1{{print $4}}' {input.titan_optimal_params})
		cellularity=$( echo "1-$prop_normal" | bc)
		python2.7 phylowgs_parser/parse_cnvs.py -f titan -c $cellularity --cnv-output {output} {input.segs}
		"""

### replace chr1...23 with 1...23 before using phylowgs parser and then remove duplicate rows
rule fixParsedCNV:
	input:
		OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.txt"
	output:
		remove_chr = OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.fixed_chr.txt",
		remove_dup = OUTDIR + "/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.fixed_chr_dup.txt"
	threads: 1
	group: "prep_phylowgs"
	resources:
		time = 30,
		mem_mb = 8500
	container:
		config["singularity"]["phylowgs"]
	shell:
		"""
		sed -e 's/chr//g' {input} > {output.remove_chr}
		sed -i -e 's/omosome/chromosome/g' {output.remove_chr}
		awk '$2!=$3' {output.remove_chr} > {output.remove_dup}
    	"""


def get_vcfs_for_phylowgs_files(wildcards):
	samples = Multi[Multi.Patient == wildcards.patient].Sample
	return expand(OUTDIR +"/results/mutect2/{tumor}_vs_{patient}-N/{tumor}_vs_{patient}-N_snpEff.ann.passOnly.inGenes.vcf.gz", tumor = samples, patient = wildcards.patient)

def get_parsedCNVs_for_phylowgs_files(wildcards):
	samples = Multi[Multi.Patient == wildcards.patient].Sample
	return expand(OUTDIR +"/results/phyloWGS/input/{tumor}_vs_{patient}-N_cnvs.fixed_chr_dup.txt", tumor = samples, patient = wildcards.patient)

def cnvs_param(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	cnv_param = ""
	for y in multi.Sample.drop_duplicates():
		cnv_param = cnv_param + "--cnvs " + y + "=" + OUTDIR + "/results/phyloWGS/input/"+ y + "_vs_" + wildcards.patient + "-N_cnvs.fixed_chr_dup.txt "
	print(cnv_param)
	return cnv_param

def vcf_files(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	vcf_files = ""
	for y in multi.Sample.drop_duplicates():
		vcf_files = vcf_files + y + "=" + OUTDIR + "/results/mutect2/" + y + "_vs_" + wildcards.patient + "-N/" + y + "_vs_" + wildcards.patient + "-N_snpEff.ann.passOnly.inGenes.vcf.gz" + " "
	print(vcf_files)
	return vcf_files

def vcf_format(wildcards):
	multi = Multi[Multi.Patient == wildcards.patient]
	vcf_format = ""
	for y in multi.Sample.drop_duplicates():
		vcf_format = vcf_format + "--vcf-type " + y + "=mutect_smchet "
	print(vcf_format)
	return vcf_format

rule parseSNVfromMutect:
	input:
		cnvs = get_parsedCNVs_for_phylowgs_files,
		passOnlyvcf =  get_vcfs_for_phylowgs_files
	output:
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		params = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_params.json"
	params:
		cnv_files = cnvs_param,
		vcf_files = vcf_files,
		vcf_format = vcf_format
	threads: 1
	group: "prep_phylowgs"
	resources:
		time = 30,
		mem_mb = 8500
	container:
		config["singularity"]["phylowgs"]
	shell:
		"""
		python2.7 \
		phylowgs_parser/create_phylowgs_inputs.py \
		{params.vcf_format} --regions normal_and_abnormal_cn \
		{params.cnv_files} \
		--output-cnvs {output.cnv} \
		--output-variants {output.ssm} \
		--output-params {output.params} \
		{params.vcf_files}
		"""

rule phyloWGS:
	input:
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		params = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_params.json"
	output:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/trees.zip"
	threads: 32
	resources:
		time = 1440,
		mem_mb = 12000
	group: "phylowgs"
	params:
		output_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/",
		temp_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/chains"
	container:
		config["singularity"]["phylowgs"]
	shell:
		"""
		mkdir -p {params.temp_dir}
		python2.7 /opt/phylowgs/multievolve.py \
		--num-chains {threads} --ssms {input.ssm} --cnvs {input.cnv} --params {input.params} \
		-O {params.output_dir} -t {params.temp_dir}/
		"""

rule output_phyloWGS_results:
	input:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/trees.zip"
	output:
		tree_summary_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json.gz",
        mutlist_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.muts.json.gz",
		mutass_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.mutass.zip"
	threads: 2
	resources:
		time = 5,
		mem_mb = 8000
	group: "phylowgs"
	container:
		config["singularity"]["phylowgs"]
	shell:
		"""
		python2.7 /opt/phylowgs/write_results.py \
		--max-multiprimary 0.99 {wildcards.tumour}_vs_{wildcards.patient}-N {input} {output.tree_summary_output} {output.mutlist_output} {output.mutass_output}
		"""
### script from https://raw.githubusercontent.com/aleighbrown/pwgs_snakemake/master/parse_pwgs_output.py
rule parse_phyloWGS_top_trees_into_csv:
	input:
		tree_summary_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json.gz",
		mutass_output = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.mutass.zip",
		ssm = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_ssm_data.txt",
		cnv = OUTDIR + "/results/phyloWGS/parsedSNV_CNV/{tumour}_vs_{patient}-N_cnv_data.txt",
		parser_script = "phylowgs_parser/parse_pwgs_output.py"
	output:
		OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/tree_likelihoods.txt"
	params:
		output_dir = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/",
		unzipped_summary = OUTDIR + "/results/phyloWGS/{tumour}_vs_{patient}-N/{tumour}_vs_{patient}-N.summ.json"
	threads: 2
	resources:
		time = 15,
		mem_mb = 8000
	group: "phylowgs"
	container:
		config["singularity"]["phylowgs"]
	shell:
		"""
		gunzip {input.tree_summary_output}
		python2.7 {input.parser_script} \
		--cnv_input {input.cnv} --ssm_input {input.ssm} \
		--summary_file {params.unzipped_summary}  --mutasgn_path {input.mutass_output} \
		--output_folder {params.output_dir} --k 5
		gzip {params.unzipped_summary}
		"""
